import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import re
import pickle

from collections import Counter
from sklearn.decomposition import PCA
from sklearn.impute import SimpleImputer
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from sklearn.metrics import confusion_matrix

from imblearn.over_sampling import SMOTE

# C√°c m√¥ h√¨nh h·ªçc m√°y
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier

# C·∫•u h√¨nh (ƒë·ªçc t·ª´ file config.py)
from config import DATA_OUTPUT, FEATURES_PATH, TARGET_COLUMN, SCALER_PATH, MODEL_PATHS

# ====== T·∫£i d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω ======
print("üîπ ƒêang t·∫£i d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω...")
try:
    # M·ªü file pickle ch·ª©a d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    with open(DATA_OUTPUT, 'rb') as f:
        data = pickle.load(f)
    with open(FEATURES_PATH, 'rb') as f:
        FEATURE_COLUMNS = pickle.load(f)
except Exception as e:
    print(f"Error: {e}")
    print("L·ªói: H√£y ch·∫°y preprocess.py tr∆∞·ªõc!")
    exit()

# Chia d·ªØ li·ªáu th√†nh X (features) v√† y (target)
X = data[FEATURE_COLUMNS]
y = data[TARGET_COLUMN]

# ====== Chia d·ªØ li·ªáu th√†nh b·ªô train v√† test ======
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# ====== Chu·∫©n h√≥a d·ªØ li·ªáu b·∫±ng StandardScaler ======
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)  # Chu·∫©n h√≥a d·ªØ li·ªáu train
X_test_scaled = scaler.transform(X_test)  # Chu·∫©n h√≥a d·ªØ li·ªáu test (d√πng c√πng scaler v·ªõi train)

# L∆∞u scaler ƒë·ªÉ d√πng l·∫°i sau
with open(SCALER_PATH, 'wb') as f:
    pickle.dump(scaler, f)

# ====== √Åp d·ª•ng SMOTE ƒë·ªÉ gi·∫£i quy·∫øt m·∫•t c√¢n b·∫±ng l·ªõp ======
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train_scaled, y_train)

# ====== ƒê·ªãnh nghƒ©a c√°c m√¥ h√¨nh h·ªçc m√°y ======
models = {
    "kNN": KNeighborsClassifier(metric='minkowski', n_neighbors=11, weights='distance'),
    "Decision_Tree": DecisionTreeClassifier(class_weight='balanced', max_depth=4, min_samples_split=2),
    "Logistic_Regression": LogisticRegression(C=100, class_weight='balanced', solver='lbfgs'),
    "SVM": SVC(C=10, class_weight='balanced', gamma='scale', kernel='linear'),
    "MLP": MLPClassifier(activation='relu', hidden_layer_sizes=(100, 50), max_iter=300, solver='adam'),
    "Random_Forest": RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42),
    "Naive_Bayes": GaussianNB(),
    "Adaboost": AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), n_estimators=50, random_state=42),
}

# ====== Hu·∫•n luy·ªán v√† l∆∞u m√¥ h√¨nh ======
for name, model in models.items():
    print(f"\nƒêang hu·∫•n luy·ªán m√¥ h√¨nh: {name}")
    model.fit(X_train_resampled, y_train_resampled)  # Hu·∫•n luy·ªán m√¥ h√¨nh tr√™n d·ªØ li·ªáu ƒë√£ c√¢n b·∫±ng l·∫°i

    # D·ª± ƒëo√°n tr√™n d·ªØ li·ªáu test
    y_pred = model.predict(X_test_scaled)

    # ƒê√°nh gi√° m√¥ h√¨nh b·∫±ng c√°c ch·ªâ s·ªë nh∆∞ Accuracy, Precision, Recall, F1-Score
    acc = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {acc:.4f}")
    print(classification_report(y_test, y_pred))  # In b√°o c√°o chi ti·∫øt v·ªÅ ƒë·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh

    # L∆∞u m√¥ h√¨nh v√†o file pickle ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
    model_path = MODEL_PATHS.get(name)  # L·∫•y ƒë∆∞·ªùng d·∫´n l∆∞u m√¥ h√¨nh t·ª´ config
    if model_path:
        with open(model_path, 'wb') as f:
            pickle.dump(model, f)
        print(f"M√¥ h√¨nh '{name}' ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {model_path}")
    else:
        print(f"Error: ƒê∆∞·ªùng d·∫´n l∆∞u m√¥ h√¨nh '{name}' kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a!")
